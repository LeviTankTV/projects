export class AuthManager {
    constructor() {
        this.token = localStorage.getItem('authToken');
    }

    async register(username, password) {
        try {
            const response = await fetch('/api/register', {
                method: 'POST',
                credentials: 'include', // Важно для куки
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ username, password })
            });

            const data = await response.json();

            if (response.ok) {
                // Сохраняем токен
                localStorage.setItem('authToken', data.token);

                // Перенаправление
                window.location.href = '/dashboard';
            }
        } catch (error) {
            console.error('Registration error', error);
        }
    }
    async tryAutoLogin() {
        const token = localStorage.getItem('authToken');

        if (token) {
            try {
                const response = await fetch('/api/verify-token', {
                    method: 'POST',
                    credentials: 'include',
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });

                if (response.ok) {
                    // Токен валиден, пользователь авторизован
                    return true;
                } else {
                    // Токен недействителен
                    this.logout();
                    return false;
                }
            } catch (error) {
                this.logout();
                return false;
            }
        }
        return false;
    }

    async login(username, password) {
        try {
            const response = await fetch('/api/login', {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ username, password })
            });

            const data = await response.json();

            if (response.ok) {
                // Сохраняем токен
                localStorage.setItem('authToken', data.token);

                // Обновляем информацию о последнем входе
                localStorage.setItem('lastLogin', new Date().toISOString());

                // Перенаправление
                window.location.href = '/dashboard';
            } else {
                // Обработка ошибок входа
                throw new Error(data.message || 'Login failed');
            }
        } catch (error) {
            console.error('Login error', error);
            throw error;
        }
    }

    logout() {
        // Удаляем токен и связанные данные
        localStorage.removeItem('authToken');
        localStorage.removeItem('lastLogin');

        // Отправляем запрос на серверлогаут
        fetch('/api/logout', {
            method: 'POST',
            credentials: 'include'
        }).catch(console.error);

        // Перенаправление на страницу входа
        window.location.href = '/login';
    }

    // Проверка необходимости повторной аутентификации
    shouldReAuthenticate() {
        const lastLogin = localStorage.getItem('lastLogin');
        if (!lastLogin) return true;

        const lastLoginDate = new Date(lastLogin);
        const currentDate = new Date();

        // Если прошло более 50 дней, требуем повторный вход
        const daysDifference = (currentDate - lastLoginDate) / (1000 * 60 * 60 * 24);
        return daysDifference > 50;
    }

    // Получение информации о текущем пользователе
    async getCurrentUser() {
        try {
            const response = await fetch('/api/me', {
                method: 'GET',
                credentials: 'include',
                headers: {
                    'Authorization': `Bearer ${localStorage.getItem('authToken')}`
                }
            });

            if (response.ok) {
                return await response.json();
            }

            return null;
        } catch (error) {
            console.error('Error fetching user', error);
            return null;
        }
    }

    // Управление устройствами
    async getActiveDevices() {
        try {
            const response = await fetch('/api/devices', {
                method: 'GET',
                credentials: 'include',
                headers: {
                    'Authorization': `Bearer ${localStorage.getItem('authToken')}`
                }
            });

            if (response.ok) {
                return await response.json();
            }

            return [];
        } catch (error) {
            console.error('Error fetching devices', error);
            return [];
        }
    }

    async removeDevice(deviceToken) {
        try {
            const response = await fetch(`/api/devices/${deviceToken}`, {
                method: 'DELETE',
                credentials: 'include',
                headers: {
                    'Authorization': `Bearer ${localStorage.getItem('authToken')}`
                }
            });

            return response.ok;
        } catch (error) {
            console.error('Error removing device', error);
            return false;
        }
    }
}