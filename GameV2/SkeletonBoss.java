package GameV2;

import java.util.List;
import java.util.Random;

public class SkeletonBoss extends Boss {
    private boolean isSummoning; // Indicates if the SkeletonBoss is currently summoning
    private int turnsRemaining; // Tracks the number of turns remaining for the summoning timer

    public SkeletonBoss(String name, int level) {
        super(name, level, 2250, 75, 45, 0);
        this.isSummoning = false;
        this.turnsRemaining = 0;
    }

    private static final String RED = "\u001B[31m";
    private static final String GREEN = "\u001B[32m";
    private static final String YELLOW = "\u001B[33m";
    private static final String BLUE = "\u001B[34m";
    private static final String PURPLE = "\u001B[35m";
    private static final String CYAN = "\u001B[36m";
    private static final String RESET = "\u001B[0m";


    @Override
    public void performAction(Game game, Room room) {
        Random random = new Random();
        List<Entity> targets = getTargets(game, room);
        List<Entity> skeletons = room.getEnemies(); // Assuming Room class has a method to get skeletons

        // Check if currently summoning
        if (isSummoning) {
            handleSummoning(game, room);
        } else {
            // Randomly choose an action
            int actionChoice = random.nextInt(5); // Now we have 5 actions

            switch (actionChoice) {
                case 0: // Arrow Rain
                    arrowRain(game, room);
                    break;
                case 1: // Heal all skeletons
                    healSkeletons(skeletons);
                    break;
                case 2: // Summon one skeleton
                    summonSkeleton(game, room);
                    break;
                case 3: // Start summoning timer
                    startSummoningTimer();
                    break;
                case 4: // Regeneration effect
                    applyRegenerationEffect(room);
                    break;
            }
        }
    }

    private void arrowRain(Game game, Room room) {
        List<Entity> targets = getTargets(game, room);
        System.out.println(CYAN + "üèπ " + getName() + " –≤—ã–∑—ã–≤–∞–µ—Ç –º–æ—â–Ω—ã–π —à—Ç–æ—Ä–º —Å—Ç—Ä–µ–ª!" + RESET);
        for (Entity target : targets) {
            if (target.isAlive()) {
                attack(target, getWeapon());
            }
        }
    }

    private void healSkeletons(List<Entity> skeletons) {
        System.out.println(GREEN + "‚ú® " + getName() + " –Ω–∞—á–∏–Ω–∞–µ—Ç –¥—Ä–µ–≤–Ω–∏–π —Ä–∏—Ç—É–∞–ª –∏—Å—Ü–µ–ª–µ–Ω–∏—è!" + RESET);
        for (Entity skeleton : skeletons) {
            if (skeleton.isAlive()) {
                skeleton.heal(125);
                System.out.println(GREEN + "üíö –¢—ë–º–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç " + skeleton.getName() + " –Ω–∞ 125 HP!" + RESET);
            }
        }
    }

    private void summonSkeleton(Game game, Room room) {
        System.out.println(PURPLE + "üåÄ " + getName() + " –≤–∑—ã–≤–∞–µ—Ç –∫ —Å–∏–ª–∞–º —Ç—å–º—ã, —á—Ç–æ–±—ã –ø—Ä–∏–∑–≤–∞—Ç—å –Ω–æ–≤–æ–≥–æ —Å–∫–µ–ª–µ—Ç–∞!" + RESET);
        SecondSkeletonFactory secondSkeletonFactory = new SecondSkeletonFactory();
        Skeleton newSkeleton = secondSkeletonFactory.createSkeleton(game.getPlayer());
        room.addEnemy(newSkeleton);
        System.out.println(YELLOW + "üíÄ " + newSkeleton.getName() + " –≤–æ—Å—Å—Ç–∞—ë—Ç –∏–∑ –ø—Ä–∞—Ö–∞ –∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è –∫ –±–∏—Ç–≤–µ!" + RESET);
    }

    private void startSummoningTimer() {
        System.out.println(BLUE + "üï∞Ô∏è " + getName() + " –Ω–∞—á–∏–Ω–∞–µ—Ç —Å–ª–æ–∂–Ω—ã–π —Ä–∏—Ç—É–∞–ª –ø—Ä–∏–∑—ã–≤–∞... –ü–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è 2 —Ö–æ–¥–∞!" + RESET);
        isSummoning = true;
        turnsRemaining = 2;
    }

    private void handleSummoning(Game game, Room room) {
        turnsRemaining--;
        System.out.println(BLUE + "‚è≥ " + getName() + " –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∏—Ç—É–∞–ª –ø—Ä–∏–∑—ã–≤–∞! –û—Å—Ç–∞–ª–æ—Å—å —Ö–æ–¥–æ–≤: " + turnsRemaining + RESET);

        if (turnsRemaining <= 0) {
            System.out.println(PURPLE + "üåü –†–∏—Ç—É–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω! " + getName() + " –ø—Ä–∏–∑—ã–≤–∞–µ—Ç –∞—Ä–º–∏—é —Ç—å–º—ã!" + RESET);
            for (int i = 0; i < 3; i++) {
                summonSkeleton(game, room);
            }
            isSummoning = false;
            System.out.println(YELLOW + "üëë " + getName() + " —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–∑–≤–∞–ª 3 –º–æ–≥—É—á–∏—Ö —Å–∫–µ–ª–µ—Ç–∞!" + RESET);
        }
    }

    private void applyRegenerationEffect(Room room) {
        List<Entity> enemies = room.getEnemies(); // Assuming Room has a method to get all enemies
        for (Entity enemy : enemies) {
            enemy.addEffect(new RegenerationEffect(2, "regen", 50));
        }
    }

    @Override
    public void dropLoot(Game game) {
        super.dropLoot(game);
        Random random = new Random();
        if (random.nextDouble() < 0.5) {
            game.getPlayer().getInventory().addItem(new SkeletonBossUltraBow());

            System.out.println(WHITE_BOLD + "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê –ú–ò–§–ò–ß–ï–°–ö–ê–Ø –î–û–ë–´–ß–ê ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó" + RESET);
            System.out.println(WHITE_BOLD + "‚ïë" + PURPLE_BOLD + "    üèπ " + getName() + " —Ä–æ–Ω—è–µ—Ç –£–ª—å—Ç—Ä–∞-–ª—É–∫ –°–∫–µ–ª–µ—Ç–∞!    " + WHITE_BOLD + "‚ïë" + RESET);
            System.out.println(WHITE_BOLD + "‚ïë" + RED_BOLD + "        ‚öúÔ∏è –ú–ò–§–ò–ß–ï–°–ö–ò–ô –ü–†–ï–î–ú–ï–¢! ‚öúÔ∏è         " + WHITE_BOLD + "‚ïë" + RESET);
            System.out.println(WHITE_BOLD + "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù" + RESET);
        }
    }
    private static final String WHITE_BOLD = "\u001B[1;37m";
    private static final String PURPLE_BOLD = "\u001B[1;35m";
    private static final String RED_BOLD = "\u001B[1;31m";
}