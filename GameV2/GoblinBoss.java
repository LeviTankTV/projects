package GameV2;

import java.util.List;
import java.util.Random;

public class GoblinBoss extends Boss {
    private boolean isSummoning; // Indicates if the GoblinBoss is currently summoning
    private int turnsRemaining; // Tracks the number of turns remaining for the summoning timer

    public GoblinBoss(String name, int level) {
        super(name, level, 2750, 50, 20, 20);
        this.isSummoning = false;
        this.turnsRemaining = 0;
    }

    @Override
    public void performAction(Game game, Room room) {
        Random random = new Random();
        List<Entity> allies = room.getEnemies(); // Get the GoblinBoss's allies (goblins)

        // Check if currently summoning
        if (isSummoning) {
            handleSummoning(game, room);
        } else {
            // Randomly choose an action
            int actionChoice = random.nextInt(4); // Now we have 4 actions

            switch (actionChoice) {
                case 0: // Increase strength of allies
                    increaseStrengthOfAllies(allies);
                    break;
                case 1: // Start summoning timer
                    startSummoningTimer();
                    break;
                case 2: // Summon one goblin
                    summonGoblin(game, room);
                    break;
                case 3: // Rob the player
                    robPlayer(game);
                    break;
            }
        }
    }

    private void increaseStrengthOfAllies(List<Entity> allies) {
        for (Entity ally : allies) {
            if (ally.isAlive() && ally instanceof Goblin) {
                ally.addEffect(new IncreasedStrengthEffect(3, "Increased strength from Goblin Boss", 1.5));
                System.out.println(GREEN + "üí™ " + getName() + " —É—Å–∏–ª–∏–≤–∞–µ—Ç " + ally.getName() + "! –°–∏–ª–∞ –≥–æ–±–ª–∏–Ω–∞ –≤–æ–∑—Ä–æ—Å–ª–∞!" + RESET);
            }
        }
    }

    private void startSummoningTimer() {
        System.out.println(PURPLE + "üåÄ " + getName() + " –Ω–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–∏–∑—ã–≤ –≥–æ–±–ª–∏–Ω–æ–≤... –≠—Ç–æ –∑–∞–π–º–µ—Ç 2 —Ö–æ–¥–∞!" + RESET);
        isSummoning = true;
        turnsRemaining = 2; // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä –Ω–∞ 2 —Ö–æ–¥–∞
    }

    private void handleSummoning(Game game, Room room) {
        turnsRemaining--;
        System.out.println(BLUE + "‚è≥ " + getName() + " –ø—Ä–∏–∑—ã–≤–∞–µ—Ç –≥–æ–±–ª–∏–Ω–æ–≤! –û—Å—Ç–∞–ª–æ—Å—å —Ö–æ–¥–æ–≤: " + turnsRemaining + RESET);

        if (turnsRemaining <= 0) {
            for (int i = 0; i < 3; i++) {
                summonGoblin(game, room); // –ü—Ä–∏–∑–≤–∞—Ç—å 3 –Ω–æ–≤—ã—Ö –≥–æ–±–ª–∏–Ω–∞
            }
            isSummoning = false; // –°–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–∑—ã–≤–∞
            System.out.println(YELLOW + "‚ú® " + getName() + " —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–∑–≤–∞–ª –≥–æ–±–ª–∏–Ω–æ–≤!" + RESET);
        }
    }

    private void summonGoblin(Game game, Room room) {
        System.out.println(PURPLE + "üåÄ " + getName() + " –ø—Ä–∏–∑—ã–≤–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –≥–æ–±–ª–∏–Ω–∞!" + RESET);
        GoblinFactory goblinFactory = new GoblinFactory(); // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å GoblinFactory
        Goblin newGoblin = goblinFactory.createGoblin(game.getPlayer()); // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –≥–æ–±–ª–∏–Ω–∞
        room.addEnemy(newGoblin); // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —É Room –µ—Å—Ç—å –º–µ—Ç–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—Ä–∞–≥–æ–≤
        System.out.println(GREEN + "üë∫ –ì–æ–±–ª–∏–Ω " + newGoblin.getName() + " –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –±–∏—Ç–≤–µ!" + RESET);
    }

    private void robPlayer(Game game) {
        Player player = game.getPlayer(); // –ü–æ–ª—É—á–∏—Ç—å –∏–≥—Ä–æ–∫–∞
        Random random = new Random();
        int stolenGold = 500 + random.nextInt(1500); // –°–ª—É—á–∞–π–Ω–æ —É–∫—Ä–∞—Å—Ç—å –æ—Ç 500 –¥–æ 2000 –∑–æ–ª–æ—Ç–∞
        player.setGold(player.getGold() - stolenGold); // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –µ—Å—Ç—å –º–µ—Ç–æ–¥ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –∑–æ–ª–æ—Ç–∞
        System.out.println(RED + "üí∞ " + getName() + " –∫—Ä–∞–¥–µ—Ç —É –∏–≥—Ä–æ–∫–∞ " + stolenGold + " –∑–æ–ª–æ—Ç–∞!" + RESET);
    }
    private static final String RED = "\u001B[31m";
    private static final String GREEN = "\u001B[32m";
    private static final String YELLOW = "\u001B[33m";
    private static final String BLUE = "\u001B[34m";
    private static final String PURPLE = "\u001B[35m";
    @Override
    public void dropLoot(Game game) {
        super.dropLoot(game);
        Random random = new Random();
        if (random.nextDouble() < 0.5) {
            game.getPlayer().getInventory().addItem(new GoblinBossDarkAxe());

            System.out.println(WHITE_BOLD + "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê –ú–ò–§–ò–ß–ï–°–ö–ê–Ø –î–û–ë–´–ß–ê ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó" + RESET);
            System.out.println(WHITE_BOLD + "‚ïë" + PURPLE_BOLD + "    ü™ì " + getName() + " —Ä–æ–Ω—è–µ—Ç –¢—ë–º–Ω—ã–π –¢–æ–ø–æ—Ä –ì–æ–±–ª–∏–Ω–∞!    " + WHITE_BOLD + "‚ïë" + RESET);
            System.out.println(WHITE_BOLD + "‚ïë" + RED_BOLD + "        ‚öúÔ∏è –ú–ò–§–ò–ß–ï–°–ö–ò–ô –ü–†–ï–î–ú–ï–¢! ‚öúÔ∏è         " + WHITE_BOLD + "‚ïë" + RESET);
            System.out.println(WHITE_BOLD + "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù" + RESET);
        }
    }
    private static final String RESET = "\u001B[0m";
    private static final String WHITE_BOLD = "\u001B[1;37m";
    private static final String PURPLE_BOLD = "\u001B[1;35m";
    private static final String RED_BOLD = "\u001B[1;31m";
}
