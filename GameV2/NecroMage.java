package GameV2;

import java.util.List;
import java.util.Random;
import java.util.ArrayList;

public class NecroMage extends Entity {
    private Random random = new Random();
    private GhostFactory ghostFactory = new GhostFactory();

    public NecroMage(String name, int level) {
        super(name, level, 375, 8, 45, 70);
        setEvasion(0.25); // 25% base evasion
    }

    @Override
    public void performAction(Game game, Room room) {
        double actionRoll = random.nextDouble();

        if (actionRoll < 0.15) {
            healAllies(room);
        } else if (actionRoll < 0.30) {
            massAttack(game, room);
        } else if (actionRoll < 0.40) {
            berserkAttack(game, room);
        } else if (actionRoll < 0.55) {
            applyRegenerationToAllies(room);
        } else if (actionRoll < 0.65) {
            strengthenRandomAlly(room);
        } else if (actionRoll < 0.80) {
            applyRandomDebuff(game, room);
        } else if (actionRoll < 0.90) {
            summonGhost(game,room);
        } else {
            // Basic attack if no special action is performed
            List<Entity> targets = getTargets(game, room);
            Entity target = targets.get(random.nextInt(targets.size()));
            attack(target, new NecroStaff());
        }
    }

    private void healAllies(Room room) {
        System.out.println(getName() + " —á–∏—Ç–∞–µ—Ç –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–≥–æ –∏—Å—Ü–µ–ª–µ–Ω–∏—è!");
        for (Entity enemy : room.getEnemies()) {
            double healAmount = enemy.getMaxHealth() * 0.3;
            enemy.heal(healAmount);
            System.out.println(enemy.getName() + " –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç " + healAmount + " –∑–¥–æ—Ä–æ–≤—å—è!");
        }
    }

    private void massAttack(Game game, Room room) {
        System.out.println(getName() + " –ø—Ä–∏–∑—ã–≤–∞–µ—Ç —Ç–µ–º–Ω—É—é —ç–Ω–µ—Ä–≥–∏—é!");
        List<Entity> targets = new ArrayList<>();
        targets.add(game.getPlayer());
        targets.addAll(game.getPlayer().getAllies());

        for (Entity target : targets) {
            double damage = getAttack() * 1.2;
            target.takeDamage(damage);
            System.out.println(target.getName() + " –ø–æ–ª—É—á–∞–µ—Ç " + damage + " —É—Ä–æ–Ω–∞ –æ—Ç —Ç–µ–º–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏!");
        }
    }

    private void berserkAttack(Game game, Room room) {
        System.out.println(getName() + " –≤–ø–∞–¥–∞–µ—Ç –≤ –±–µ–∑—É–º–∏–µ –∏ –∞—Ç–∞–∫—É–µ—Ç –≤—Å–µ—Ö –≤–æ–∫—Ä—É–≥!");
        List<Entity> allTargets = new ArrayList<>();
        allTargets.add(game.getPlayer());
        allTargets.addAll(game.getPlayer().getAllies());
        allTargets.addAll(room.getEnemies());

        for (Entity target : allTargets) {
            if (target != this) {
                double damage = getAttack() * 1.5;
                target.takeDamage(damage);
                System.out.println(target.getName() + " –ø–æ–ª—É—á–∞–µ—Ç " + damage + " —É—Ä–æ–Ω–∞ –æ—Ç –±–µ–∑—É–º–Ω–æ–π –∞—Ç–∞–∫–∏!");
            }
        }
    }

    private void applyRegenerationToAllies(Room room) {
        System.out.println(getName() + " –Ω–∞–∫–ª–∞–¥—ã–≤–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞ —Å–æ—é–∑–Ω–∏–∫–æ–≤!");
        for (Entity enemy : room.getEnemies()) {
            enemy.addEffect(new RegenerationEffect(3, "–†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è", 0.1));
        }
    }

    private void strengthenRandomAlly(Room room) {
        List<Entity> enemies = room.getEnemies();
        if (!enemies.isEmpty()) {
            Entity target = enemies.get(random.nextInt(enemies.size()));
            System.out.println(getName() + " —É—Å–∏–ª–∏–≤–∞–µ—Ç " + target.getName() + "!");
            target.addEffect(new IncreasedStrengthEffect(3, "–£—Å–∏–ª–µ–Ω–∏–µ", 1.3));
        }
    }

    private void applyRandomDebuff(Game game, Room room) {
        List<Entity> targets = new ArrayList<>();
        targets.add(game.getPlayer());
        targets.addAll(game.getPlayer().getAllies());

        if (!targets.isEmpty()) {
            Entity target = targets.get(random.nextInt(targets.size()));
            int effectChoice = random.nextInt(6);

            System.out.println(getName() + " –Ω–∞–∫–ª–∞–¥—ã–≤–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –¥–µ–±–∞—Ñ—Ñ –Ω–∞ " + target.getName() + "!");

            switch (effectChoice) {
                case 0:
                    target.addEffect(new PoisonEffect(3, "–û—Ç—Ä–∞–≤–ª–µ–Ω–∏–µ"));
                    System.out.println(target.getName() + " –æ—Ç—Ä–∞–≤–ª–µ–Ω!");
                    break;
                case 1:
                    target.addEffect(new WeakenedEffect(3, "–û—Å–ª–∞–±–ª–µ–Ω–∏–µ"));
                    System.out.println(target.getName() + " –æ—Å–ª–∞–±–ª–µ–Ω!");
                    break;
                case 2:
                    target.addEffect(new BurningEffect(3, "–ü–æ–¥–∂–æ–≥"));
                    System.out.println(target.getName() + " –≥–æ—Ä–∏—Ç!");
                    break;
                case 3:
                    target.addEffect(new FrozenEffect(3, "–ó–∞–º–æ—Ä–æ–∑–∫–∞"));
                    System.out.println(target.getName() + " –∑–∞–º–æ—Ä–æ–∂–µ–Ω!");
                    break;
                case 4:
                    target.addEffect(new MarkedEffect(3, "–ú–∞—Ä–∫–∞", 1.8));
                    System.out.println(target.getName() + " –ø–æ–º–µ—á–µ–Ω!");
                    break;
                case 5:
                    target.addEffect(new BleedingEffect(3, "–ö—Ä–æ–≤—å"));
                    System.out.println(target.getName() + " –∏—Å—Ç–µ–∫–∞–µ—Ç –∫—Ä–æ–≤—å—é!");
                    break;
            }
        }
    }

    private void summonGhost(Game game, Room room) {
        Player player = game.getPlayer();
        System.out.println(getName() + " –ø—Ä–∏–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–∑—Ä–∞–∫–∞!");
        Entity ghost = ghostFactory.createGhost(player);
        room.addEnemy(ghost);
        System.out.println(ghost.getName() + " –ø–æ—è–≤–ª—è–µ—Ç—Å—è –≤ –∫–æ–º–Ω–∞—Ç–µ!");
    }

    @Override
    public void dropLoot(Game game) {
        Player player = game.getPlayer();
        int goldAmount = random.nextInt(300) + 200;
        player.setGold(player.getGold() + goldAmount);

        System.out.println(WHITE_BOLD + "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê –î–û–ë–´–ß–ê ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó" + RESET);
        System.out.println(WHITE_BOLD + "‚ïë" + GOLD_COLOR + "    üí∞ " + getName() + " —Ä–æ–Ω—è–µ—Ç " + goldAmount + " –∑–æ–ª–æ—Ç–∞!       " + WHITE_BOLD + "‚ïë" + RESET);
        System.out.println(WHITE_BOLD + "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù" + RESET);

        if (random.nextDouble() < 0.5) {
            player.addEffect(new RegenerationEffect(4, "–ë–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–µ –Ω–µ–∫—Ä–æ–º–∞–Ω—Ç–∞", 125));

            System.out.println(WHITE_BOLD + "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê –û–°–û–ë–´–ô –≠–§–§–ï–ö–¢ ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó" + RESET);
            System.out.println(WHITE_BOLD + "‚ïë" + PURPLE_BOLD + "    üßô –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –ë–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–µ –ù–µ–∫—Ä–æ–º–∞–Ω—Ç–∞! " + WHITE_BOLD + "‚ïë" + RESET);
            System.out.println(WHITE_BOLD + "‚ïë" + GREEN_BOLD + "    ‚ù§Ô∏è +125 –∫ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞ 4 —Ö–æ–¥–∞        " + WHITE_BOLD + "‚ïë" + RESET);
            System.out.println(WHITE_BOLD + "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù" + RESET);
        }
    }
    private static final String RESET = "\u001B[0m";
    private static final String WHITE_BOLD = "\u001B[1;37m";
    private static final String GOLD_COLOR = "\u001B[1;33m";
    private static final String GREEN_BOLD = "\u001B[1;32m";
    private static final String PURPLE_BOLD = "\u001B[1;35m";
}