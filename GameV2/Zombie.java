package GameV2;

import java.util.Random;

public class Zombie extends Entity {

    // Constructor for Zombie
    public Zombie(String name, int level, double baseAttack, double baseHealth) {
        super(name, level, baseHealth, 10, baseAttack, 8); // Call the Entity constructor with base values
        this.setHealth(baseHealth); // Start with full health
        setDefense(getDefense() - 1); // Zombies have slightly lower defense
    }

    // Override setHealth to ensure health management
    @Override
    public void setHealth(double health) {
        super.setHealth(health); // Call the parent method to set health
        // Additional logic can be added here if needed
    }


    @Override
    public void dropLoot(Game game) {
        Player player = game.getPlayer();
        Random random = new Random();

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–∞–¥–µ–Ω–∏—è –∑–æ–ª–æ—Ç–∞
        int lootChance = random.nextInt(100) + 1; // 1-100
        if (lootChance <= 30) { // 30% —à–∞–Ω—Å –Ω–∞ –≤—ã–ø–∞–¥–µ–Ω–∏–µ –ª—É—Ç–∞
            int goldAmount = random.nextInt(10) + 10;
            player.setGold(player.getGold() + goldAmount);

            String goldMessage = "    üí∞ " + getName() + " —Ä–æ–Ω—è–µ—Ç " + goldAmount + " –∑–æ–ª–æ—Ç–∞!";
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ–¥—Å—á–µ—Ç–∞ –≤–∏–¥–∏–º–æ–π –¥–ª–∏–Ω—ã —Å—Ç—Ä–æ–∫–∏
            int visibleLength = getVisibleLength(goldMessage);
            int padding = Math.max(0, 44 - visibleLength); // –î–æ–±–∞–≤–ª—è–µ–º Math.max –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            String paddedGoldMessage = goldMessage + " ".repeat(padding);

            System.out.println(WHITE_BOLD + "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê –î–û–ë–´–ß–ê ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó" + RESET);
            System.out.println(WHITE_BOLD + "‚ïë" + GOLD_COLOR + paddedGoldMessage + WHITE_BOLD + "‚ïë" + RESET);
            System.out.println(WHITE_BOLD + "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù" + RESET);
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–∞–¥–µ–Ω–∏—è –∫–ª—é—á–∞
        int keyChance = random.nextInt(100) + 1; // 1-100
        if (keyChance <= 4) { // 4% —à–∞–Ω—Å –Ω–∞ –≤—ã–ø–∞–¥–µ–Ω–∏–µ –∑–æ–ª–æ—Ç–æ–≥–æ –∫–ª—é—á–∞
            player.getInventory().addItem(new GoldenKey());

            String keyMessage = "    üóùÔ∏è " + getName() + " —Ä–æ–Ω—è–µ—Ç –ó–æ–ª–æ—Ç–æ–π –ö–ª—é—á!";
            int visibleLength = getVisibleLength(keyMessage);
            int keyPadding = Math.max(0, 44 - visibleLength); // –î–æ–±–∞–≤–ª—è–µ–º Math.max –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            String paddedKeyMessage = keyMessage + " ".repeat(keyPadding);

            System.out.println(WHITE_BOLD + "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê –†–ï–î–ö–ê–Ø –î–û–ë–´–ß–ê ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó" + RESET);
            System.out.println(WHITE_BOLD + "‚ïë" + GOLD_COLOR + paddedKeyMessage + WHITE_BOLD + "‚ïë" + RESET);
            System.out.println(WHITE_BOLD + "‚ïë" + GREEN_BOLD + "        ‚ú® –õ–ï–ì–ï–ù–î–ê–†–ù–´–ô –ü–†–ï–î–ú–ï–¢! ‚ú®          " + WHITE_BOLD + "‚ïë" + RESET);
            System.out.println(WHITE_BOLD + "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù" + RESET);
        }
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –≤–∏–¥–∏–º–æ–π –¥–ª–∏–Ω—ã —Å—Ç—Ä–æ–∫–∏
    private int getVisibleLength(String str) {
        return str.codePointCount(0, str.length());
        // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:
        // return str.replaceAll("[^\x00-\xff]", "  ").length();
    }

    private static final String GOLD_COLOR = "\033[1;33m"; // –ó–æ–ª–æ—Ç–æ–π
    private static final String WHITE_BOLD = "\033[1;37m"; // –ë–µ–ª—ã–π –∂–∏—Ä–Ω—ã–π
    private static final String GREEN_BOLD = "\033[1;32m"; // –ó–µ–ª–µ–Ω—ã–π –∂–∏—Ä–Ω—ã–π
    private static final String RESET = "\033[0m"; // –°–±—Ä–æ—Å —Ü–≤–µ—Ç–∞

}