package GameV2;

import java.io.*;
import java.util.LinkedList;
import java.util.List;
import java.util.Scanner;
import java.util.ArrayList;

public class Game {

    private Room currentRoom;
    private Player player;
    private LinkedList<Room> visitedRooms;
    private boolean secondGamePart = false;
    private boolean thirdGamePart = false;
    private Scanner scanner;
    private boolean ghostSupremeMageBeaten = false;
    private boolean putFlowerAtKingGrave = false;
    private boolean putFlowerAtQueenGrave = false;
    private boolean putFlowerAtPrinceGrave = false;
    private boolean putFlowerAtPrincessGrave = false;
    private List<Achievement> achievements;
    private int monstersKilled = 0;
    private boolean isSecondGamePart = false;

    public List<Achievement> getAchievements() {
        return achievements;
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    public void unlockAchievement(String achievementName) {
        for (Achievement achievement : achievements) {
            if (achievement.getName().equals(achievementName) && !achievement.isUnlocked()) {
                achievement.unlock();
                System.out.println("–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: " + achievement.getName());
                break;
            }
        }
    }

    private void initializeAchievements() {
        achievements = new ArrayList<>();
        achievements.add(new Achievement("–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏", "–ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É"));
        achievements.add(new Achievement("–ü–æ–±–µ–¥–∏—Ç–µ–ª—å", "–ü—Ä–æ–π–¥–∏—Ç–µ –∏–≥—Ä—É –¥–æ –∫–æ–Ω—Ü–∞"));
        achievements.add(new Achievement("–ú–∞—Å—Ç–µ—Ä –º–∞–≥–∏–∏", "–ò–∑—É—á–∏—Ç–µ –≤—Å–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è"));
        achievements.add(new Achievement("–ë–æ–≥–∞—Ç—ã–π", "–ù–∞–∫–æ–ø–∏—Ç–µ 10000+ –º–æ–Ω–µ—Ç"));
        achievements.add(new Achievement("–ü–∏—Ä –Ω–∞ –≤–µ—Å—å –º–∏—Ä", "–î–æ–±–µ—Ä–∏—Ç–µ—Å—å –¥–æ –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è –ø–æ–¥–∑–µ–º–µ–ª—å—è"));
        achievements.add(new Achievement("–ò—Å—Ç—Ä–µ–±–∏—Ç–µ–ª—å –º–æ–Ω—Å—Ç—Ä–æ–≤", "–ü–æ–±–µ–¥–∏—Ç–µ 1000 –≤—Ä–∞–≥–æ–≤"));
        achievements.add(new Achievement("–õ—É—á—à–∏–µ –¥—Ä—É–∑—å—è", "–°–æ–±–µ—Ä–∏—Ç–µ 10 —Å–æ—é–∑–Ω–∏–∫–æ–≤"));
    }

    public void incrementMonstersKilled() {
        monstersKilled++;
        checkMonsterKillerAchievement();
    }

    public void checkRichAchievement() {
        if (player.getGold() >= 10000) {
            unlockAchievement("–ë–æ–≥–∞—Ç—ã–π");
        }
    }

    public void checkSecondFloorAchievement() {
        if (isSecondGamePart) {
            unlockAchievement("–ü–∏—Ä –Ω–∞ –≤–µ—Å—å –º–∏—Ä");
        }
    }

    private void checkMonsterKillerAchievement() {
        if (monstersKilled >= 1000) {
            unlockAchievement("–ò—Å—Ç—Ä–µ–±–∏—Ç–µ–ª—å –º–æ–Ω—Å—Ç—Ä–æ–≤");
        }
    }

    public void checkBestFriendsAchievement() {
        if (player.getAllies().size() >= 10) {
            unlockAchievement("–õ—É—á—à–∏–µ –¥—Ä—É–∑—å—è");
        }
    }


    public Game(Player player) {

        this.scanner = new Scanner(System.in);
        this.player = player;
        this.visitedRooms = new LinkedList<>();
        generateDungeon();
        currentRoom = visitedRooms.get(0);
        initializeAchievements();
    }

    public void saveGame(String filename) {
        try {
            File saveDir = new File("saves");
            if (!saveDir.exists()) {
                saveDir.mkdir();
            }

            // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
            File saveFile = new File(saveDir, filename + ".sav");

            // –ï—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É–¥–∞–ª—è–µ–º –µ–≥–æ
            if (saveFile.exists()) {
                saveFile.delete();
            }

            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(saveFile))) {
                oos.writeObject(player);
                System.out.println("–ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª: " + saveFile.getName());
            }
        } catch (IOException e) {
            System.out.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–≥—Ä—ã: " + e.getMessage());
        }
    }

    public void loadGame(String filename) {
        try {
            File saveFile = new File("saves", filename);
            if (!saveFile.exists()) {
                throw new FileNotFoundException("–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω: " + filename);
            }

            try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(saveFile))) {
                Player loadedPlayer = (Player) ois.readObject();
                if (loadedPlayer != null) {
                    this.player = loadedPlayer;
                    System.out.println("–ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞: " + filename);
                }
            }
        } catch (IOException | ClassNotFoundException e) {
            System.out.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–≥—Ä—ã: " + e.getMessage());
            throw new RuntimeException("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–≥—Ä—É.");
        }
    }

    public Player getPlayer() {
        return player;
    }

    public boolean isThirdGamePart() {
        return thirdGamePart;
    }

    public void setThirdGamePart(boolean thirdGamePart) {
        this.thirdGamePart = thirdGamePart;
    }

    public boolean isSecondGamePart() {
        return secondGamePart;
    }

    public void setSecondGamePart(boolean secondGamePart) {
        this.secondGamePart = secondGamePart;
    }

    public Room getCurrentRoom() {
        return currentRoom;
    }

    public void setCurrentRoom(Room currentRoom) {
        this.currentRoom = currentRoom;
    }

    public boolean isGhostSupremeMageBeaten() {
        return ghostSupremeMageBeaten;
    }

    public void setGhostSupremeMageBeaten(boolean ghostSupremeMageBeaten) {
        this.ghostSupremeMageBeaten = ghostSupremeMageBeaten;
    }

    public boolean isPutFlowerAtKingGrave() {
        return putFlowerAtKingGrave;
    }

    public void setPutFlowerAtKingGrave(boolean putFlowerAtKingGrave) {
        this.putFlowerAtKingGrave = putFlowerAtKingGrave;
    }

    public boolean isPutFlowerAtQueenGrave() {
        return putFlowerAtQueenGrave;
    }

    public void setPutFlowerAtQueenGrave(boolean putFlowerAtQueenGrave) {
        this.putFlowerAtQueenGrave = putFlowerAtQueenGrave;
    }

    public boolean isPutFlowerAtPrinceGrave() {
        return putFlowerAtPrinceGrave;
    }

    public void setPutFlowerAtPrinceGrave(boolean putFlowerAtPrinceGrave) {
        this.putFlowerAtPrinceGrave = putFlowerAtPrinceGrave;
    }

    public boolean isPutFlowerAtPrincessGrave() {
        return putFlowerAtPrincessGrave;
    }

    public void setPutFlowerAtPrincessGrave(boolean putFlowerAtPrincessGrave) {
        this.putFlowerAtPrincessGrave = putFlowerAtPrincessGrave;
    }

    public void prepareFinalBattle(Room room) {
        TrueThroneRoom finalRoom = new TrueThroneRoom();
        finalRoom.addEnemy(new SupremeMage());
        setCurrentRoom(finalRoom);
    }

    private void generateDungeon() {
        Room firstRoom;
        if (thirdGamePart) {
            firstRoom = new TrueCastleEntranceRoom();
        } else if (secondGamePart) {
            firstRoom = new CastleEntranceRoom(player);
        } else {
            firstRoom = new StartRoom(player);
        }

        visitedRooms.clear();
        visitedRooms.add(firstRoom);
        Room previousRoom = firstRoom;

        for (int i = 1; i < 600; i++) {
            Room newRoom;
            if (thirdGamePart) {
                newRoom = Room.generateThirdGamePartRandomRoom(this);
            } else if (secondGamePart) {
                newRoom = Room.generateSecondGamePartRandomRoom(this);
            } else {
                newRoom = Room.generateRandomRoom(this);
            }

            visitedRooms.add(newRoom);
            previousRoom.setNextRoom(newRoom);
            newRoom.setPreviousRoom(previousRoom);
            previousRoom = newRoom;
        }
        previousRoom.setNextRoom(null);
    }

    public void transitionToSecondPart() {
        secondGamePart = true;
        thirdGamePart = false;
        generateDungeon();
        currentRoom = visitedRooms.getFirst();
        System.out.println(GREEN_BOLD_BRIGHT + "–í—ã –≤—Ö–æ–¥–∏—Ç–µ –≤–æ –≤—Ç–æ—Ä—É—é —á–∞—Å—Ç—å –∏–≥—Ä—ã... üö™" + RESET);
    }

    public void transitionToThirdPart() {
        thirdGamePart = true;
        secondGamePart = false;
        generateDungeon();
        currentRoom = visitedRooms.getFirst();
        System.out.println(GREEN_BOLD_BRIGHT + "–í—ã –≤—Ö–æ–¥–∏—Ç–µ –≤ —Ç—Ä–µ—Ç—å—é —á–∞—Å—Ç—å –∏–≥—Ä—ã... üö™" + RESET);
    }

    public void start() {
        System.out.println(GREEN_BOLD_BRIGHT + "–í—ã –≤—ã–ø—Ä—ã–≥–Ω—É–ª–∏ –∏–∑ –ø–æ—Ä—Ç–∞–ª–∞ –∏ –æ–∫–∞–∑–∞–ª–∏—Å—å –Ω–∞ –≤—Ç–æ—Ä–æ–º —ç—Ç–∞–∂–µ –ø–æ–¥–∑–µ–º–µ–ª—å—è. –û—Å–º–∞—Ç—Ä–∏–≤–∞—è—Å—å, –≤—ã –≤–∏–¥–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω." + RESET);

        while (player.isAlive()) {
            currentRoom.playerTurn(this, currentRoom);

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫–æ –≤—Ç–æ—Ä–æ–π —á–∞—Å—Ç–∏
            if (currentRoom instanceof CastleEntranceRoom && !secondGamePart) {
                transitionToSecondPart();
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Ç—Ä–µ—Ç—å–µ–π —á–∞—Å—Ç–∏
            if (currentRoom instanceof TrueCastleEntranceRoom && !thirdGamePart) {
                transitionToThirdPart();
            }
            checkAchievements();
        }
    }

    public void checkAchievements() {
        if (player.getGold() >= 10000) {
            unlockAchievement(YELLOW_BOLD_BRIGHT + "–ë–æ–≥–∞—Ç—ã–π" + RESET);
        }
        if (secondGamePart) {
            unlockAchievement(YELLOW_BOLD_BRIGHT + "–ü–∏—Ä –Ω–∞ –≤–µ—Å—å –º–∏—Ä" + RESET);
        }
        if (monstersKilled >= 1000) {
            unlockAchievement(YELLOW_BOLD_BRIGHT + "–ò—Å—Ç—Ä–µ–±–∏—Ç–µ–ª—å –º–æ–Ω—Å—Ç—Ä–æ–≤" + RESET);
        }
        if (player.getAllies().size() >= 10) {
            unlockAchievement(YELLOW_BOLD_BRIGHT + "–õ—É—á—à–∏–µ –¥—Ä—É–∑—å—è" + RESET);
        }
        // –î–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    }

    // –ú–µ—Ç–æ–¥—ã –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
    public void moveForward() {
        Room nextRoom = currentRoom.getNextRoom();
        nextRoom.setEscaped(false); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ escaped –¥–ª—è –Ω–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã
        if (nextRoom != null) {
            // –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∫–æ–º–Ω–∞—Ç—É –≤ NothingRoom
            int currentIndex = visitedRooms.indexOf(currentRoom);
            currentRoom = nextRoom;
            System.out.println(GREEN_BOLD_BRIGHT + "–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ " + currentRoom.getClass().getSimpleName() + "." + RESET);
        } else {
            System.out.println(RED_BOLD_BRIGHT + "–°–ª–µ–¥—É—é—â–∞—è –∫–æ–º–Ω–∞—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞." + RESET);
        }
    }

    public void moveBackward() {
        Room previousRoom = currentRoom.getPreviousRoom();
        if (previousRoom != null) {
            currentRoom = previousRoom;
            System.out.println(GREEN_BOLD_BRIGHT + "–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ " + currentRoom.getClass().getSimpleName() + "." + RESET);
        } else {
            System.out.println(RED_BOLD_BRIGHT + "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥." + RESET);
        }
    }

    public static final String GREEN_BOLD_BRIGHT = "\033[1;92m"; // –Ø—Ä–∫–∏–π –∑–µ–ª–µ–Ω—ã–π
    public static final String RED_BOLD_BRIGHT = "\033[1;91m";   // –Ø—Ä–∫–∏–π –∫—Ä–∞—Å–Ω—ã–π
    public static final String YELLOW_BOLD_BRIGHT = "\033[1;93m"; // –Ø—Ä–∫–∏–π –∂–µ–ª—Ç—ã–π
    public static final String RESET = "\033[0m";

    public Scanner getScanner() {
        return scanner;
    }

    public void goToRoom(int roomIndex) {
        if (roomIndex >= 0 && roomIndex < visitedRooms.size()) {
            currentRoom = visitedRooms.get(roomIndex);
        } else {
            System.out.println("–¢–∞–∫–æ–π –∫–æ–º–Ω–∞—Ç—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.");
        }
    }

}

